{"ast":null,"code":"var _jsxFileName = \"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Context/TodoContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useCallback, useEffect, useState } from \"react\";\nimport { AddTask } from \"../API/AddTask\";\nimport { GetAllTasks } from \"../API/GetAllTasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialValue = {\n  todoList: [],\n  addTodo: todo => {},\n  removeTodo: id => {},\n  handleCheck: (id, checked) => {},\n  handleDelete: () => {}\n};\nexport const TodoContext = /*#__PURE__*/createContext(initialValue); // const KEY = \"paraiii-todo-list\";\n\nexport const TodoContextProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props; // const storage = window.localStorage;\n  // const storedList = storage.getItem(KEY) || \"[]\"\n  // const [todoList, setTodoList] = useState<TodoItem[]>(JSON.parse(storedList));\n\n  const [todoList, setTodoList] = useState([]);\n  useEffect(() => {\n    //     storage.setItem(KEY, JSON.stringify(todoList));\n    // }, [todoList])\n    //每当todolist改变时，把东西存到storage里\n    // AddTask().then(res => {\n    //     //  setTodoList(res.data)\n    //      addTodo(res.data.data) //data里有count和data两部分，不是一个obj\n    // })\n    GetAllTasks().then(res => {\n      const todoDtos = res.data.data;\n      const todoItems = todoDtos.map(todoDto => {\n        const content = JSON.parse(todoDto.description);\n        return {\n          id: todoDto._id,\n          ...content\n        };\n      });\n      setTodoList(todoItems);\n    }); // }, [todoList]); //不能有这个dependency\n  }, []);\n\n  const addTodo = todo => {\n    const todoDto = {\n      \"description\": JSON.stringify(todo)\n    };\n    AddTask(todoDto).then(res => {\n      //点击button之后拿到response\n      // todo.id = res.data.data._id\n      setTodoList([...todoList, todo]);\n    });\n  };\n\n  const removeTodo = id => {\n    setTodoList(todoList.filter(item => {\n      return item.id !== id;\n    }));\n  };\n\n  const handleCheck = useCallback((id, checked) => {\n    const modifiedTodoList = todoList.map(todoItem => {\n      if (todoItem.id === id) {\n        todoItem.checked = !todoItem.checked;\n      }\n\n      return todoItem;\n    });\n    setTodoList(modifiedTodoList);\n  }, [todoList]);\n  const handleDelete = useCallback(() => {\n    const filteredTodoList = todoList.filter(todoItem => todoItem.checked === false);\n    debugger;\n    setTodoList(filteredTodoList);\n  }, [todoList]);\n  const values = {\n    todoList: todoList,\n    addTodo: addTodo,\n    removeTodo: removeTodo,\n    handleCheck: handleCheck,\n    handleDelete: handleDelete\n  };\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoContextProvider, \"agV7U/PgKiyB64YFxfJzi/lnN9Y=\");\n\n_c = TodoContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoContextProvider\");","map":{"version":3,"sources":["/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Context/TodoContext.tsx"],"names":["createContext","useCallback","useEffect","useState","AddTask","GetAllTasks","initialValue","todoList","addTodo","todo","removeTodo","id","handleCheck","checked","handleDelete","TodoContext","TodoContextProvider","props","children","setTodoList","then","res","todoDtos","data","todoItems","map","todoDto","content","JSON","parse","description","_id","stringify","filter","item","modifiedTodoList","todoItem","filteredTodoList","values"],"mappings":"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","sourcesContent":["import { createContext, useCallback, useEffect, useState } from \"react\";\nimport { AddTask } from \"../API/AddTask\";\nimport { GetAllTasks } from \"../API/GetAllTasks\";\nimport { TodoDto, TodoItem } from \"../types\";\n\ninterface TodoContextProp {\n    children: any;\n    value: TodoContextValue;\n}\n\nexport interface TodoContextValue {\n    todoList: TodoItem[];\n    addTodo: (todo: TodoItem) => void;\n    removeTodo: (id: string) => void;\n    handleCheck: (id: string, checked: boolean) => void;\n    handleDelete: () => void;\n}\nexport const initialValue: TodoContextValue = {\n    todoList: [],\n    addTodo: (todo:TodoItem)=>{},\n    removeTodo: (id: string) => {},\n    handleCheck: (id: string, checked: boolean) => {},\n    handleDelete: () => {},\n}\n\nexport const TodoContext = createContext(initialValue);\n// const KEY = \"paraiii-todo-list\";\nexport const TodoContextProvider = (props: TodoContextProp) => {\n    const {children} = props;    \n    // const storage = window.localStorage;\n    // const storedList = storage.getItem(KEY) || \"[]\"\n    // const [todoList, setTodoList] = useState<TodoItem[]>(JSON.parse(storedList));\n    const [todoList, setTodoList] = useState<TodoItem[]>([]);\n\n    useEffect (() => {\n    //     storage.setItem(KEY, JSON.stringify(todoList));\n    // }, [todoList])\n        //每当todolist改变时，把东西存到storage里\n        // AddTask().then(res => {\n        //     //  setTodoList(res.data)\n        //      addTodo(res.data.data) //data里有count和data两部分，不是一个obj\n        // })\n        GetAllTasks().then(res => {\n            const todoDtos = res.data.data;\n            const todoItems = todoDtos.map((todoDto: TodoDto) => {\n                const content: Partial<TodoItem> = JSON.parse(todoDto.description)\n                return {id: todoDto._id, ...content}\n            })\n            setTodoList(todoItems)\n       })\n    // }, [todoList]); //不能有这个dependency\n    }, []);\n\n    const addTodo = (todo: TodoItem): void => {\n        const todoDto: Partial<TodoDto> = {\n            \"description\": JSON.stringify(todo)\n        }; \n\n        AddTask(todoDto).then(res => { //点击button之后拿到response\n            // todo.id = res.data.data._id\n            setTodoList([...todoList, todo]);\n        });\n    };\n\n    const removeTodo = (id: string): void => {\n        setTodoList (\n            todoList.filter((item)=> {\n                return item.id !== id;\n            })\n        );\n    };\n    \n    const handleCheck = useCallback ((id:string, checked: boolean) => {\n        const modifiedTodoList = todoList.map((todoItem) => {\n          if (todoItem.id === id) {\n            todoItem.checked = !todoItem.checked;\n          }\n          return todoItem;\n        });\n        setTodoList(modifiedTodoList);\n    }, [todoList]);\n\n    const handleDelete = useCallback (() => {\n        const filteredTodoList = todoList.filter((todoItem) => todoItem.checked === false);\n        debugger\n        setTodoList(filteredTodoList);\n    }, [todoList]);\n\n    const values: TodoContextValue = {\n        todoList: todoList,\n        addTodo: addTodo,\n        removeTodo: removeTodo,\n        handleCheck: handleCheck,\n        handleDelete: handleDelete,\n    };\n\n    return (\n        <TodoContext.Provider value={values}>\n            {children}\n        </TodoContext.Provider>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}