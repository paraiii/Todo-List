{"ast":null,"code":"var _jsxFileName = \"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Context/TodoContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialValue = {\n  todoList: [],\n  addTodo: todo => {},\n  removeTodo: id => {},\n  handleCheck: (id, checked) => {},\n  handleDelete: () => {}\n};\nexport const TodoContext = /*#__PURE__*/createContext(initialValue);\nexport const TodoContextProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [todoList, setTodoList] = useState([]);\n\n  const addTodo = todo => {\n    setTodoList([...todoList, todo]);\n  };\n\n  const removeTodo = id => {\n    setTodoList(todoList.filter(item => {\n      return item.id !== id;\n    }));\n  };\n\n  const handleCheck = (id, checked) => {\n    const modifiedTodoList = todoList.map(todoItem => {\n      if (todoItem.id === id) {\n        todoItem.checked = !todoItem.checked;\n      }\n\n      return todoItem;\n    });\n    setTodoList(modifiedTodoList);\n  }; // const [checkArr, setCheckArr] = useState([]);\n  // const handleCheck = (e: ChangeEvent, id: string) => {\n  //     const checked = e.target.checked;\n  //     setCheckArr([ {id:id, checked:checked}, ...checkArr])\n  // }\n\n\n  const handleDelete = () => {\n    const filteredTodoList = todoList.filter(todoItem => todoItem.checked === false);\n    setTodoList(filteredTodoList);\n  };\n\n  const values = {\n    todoList: todoList,\n    addTodo: addTodo,\n    removeTodo: removeTodo,\n    handleCheck: handleCheck,\n    handleDelete: handleDelete\n  };\n  return (\n    /*#__PURE__*/\n    // <TodoContext.Provider value={values}>\n    _jsxDEV(TodoContext.Provider, {\n      value: values,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  );\n}; // interface TodoContextProp {\n//     children: any;\n//     value: TodoContextValue;\n// }\n// export interface TodoContextValue {\n//     todoList: TodoItem[];\n//     addTodo: (todo: TodoItem) => void;\n//     removeTodo: (id: string) => void;\n// }\n// export const initialValue: TodoContextValue = {\n//     todoList: [],\n//     addTodo: (todo:TodoItem)=>{},\n//     removeTodo: (id: string) => {},\n// }\n// export const TodoContext = createContext(initialValue);\n// export const TodoContextProvider = (props: TodoContextProp) => {\n//     const {children} = props;    \n//     // const [inputDesc, setInputDesc] = useState<string>('')\n//     // const [inputCate, setInputCate] = useState<string>('')\n//     // const [inputCont, setInputCont] = useState<string>('')\n//     const [todoList, setTodoList] = useState<TodoItem[]>([]);\n//     const addTodo = (todo: TodoItem): void => {\n//         setTodoList([...todoList, todo]);\n//     };\n//     const removeTodo = (id: string): void => {\n//         setTodoList (\n//             todoList.filter((item)=> {\n//                 return item.id != id;\n//             })\n//         );\n//     };\n//     const values: TodoContextValue = {\n//         todoList: todoList,\n//         // id:Math.floor(Math.random() * 1000),  //给todolist的事随机分配一个0-1000的数做id\n//         // desc: inputDesc,\n//         // category: inputCate,\n//         // content: inputCont,\n//         addTodo: addTodo,\n//         removeTodo: removeTodo\n//     };\n//     return (\n//         // <TodoContext.Provider value={values}>\n//         <TodoContext.Provider value={values}>\n//             {children}\n//         </TodoContext.Provider>\n//     );\n// }\n\n_s(TodoContextProvider, \"8oII/eZSxfH0CVCrakPxQrDDmr8=\");\n\n_c = TodoContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoContextProvider\");","map":{"version":3,"sources":["/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Context/TodoContext.tsx"],"names":["createContext","useState","initialValue","todoList","addTodo","todo","removeTodo","id","handleCheck","checked","handleDelete","TodoContext","TodoContextProvider","props","children","setTodoList","filter","item","modifiedTodoList","map","todoItem","filteredTodoList","values"],"mappings":";;;AAAA,SAAsBA,aAAtB,EAAqCC,QAArC,QAAqD,OAArD;;AAiBA,OAAO,MAAMC,YAA8B,GAAG;AAC1CC,EAAAA,QAAQ,EAAE,EADgC;AAE1CC,EAAAA,OAAO,EAAGC,IAAD,IAAiB,CAAE,CAFc;AAG1CC,EAAAA,UAAU,EAAGC,EAAD,IAAgB,CAAE,CAHY;AAI1CC,EAAAA,WAAW,EAAE,CAACD,EAAD,EAAaE,OAAb,KAAkC,CAAE,CAJP;AAK1CC,EAAAA,YAAY,EAAE,MAAM,CAAE;AALoB,CAAvC;AASP,OAAO,MAAMC,WAAW,gBAAGX,aAAa,CAACE,YAAD,CAAjC;AAEP,OAAO,MAAMU,mBAAmB,GAAIC,KAAD,IAA4B;AAAA;;AAC3D,QAAM;AAACC,IAAAA;AAAD,MAAaD,KAAnB;AACA,QAAM,CAACV,QAAD,EAAWY,WAAX,IAA0Bd,QAAQ,CAAa,EAAb,CAAxC;;AAGA,QAAMG,OAAO,GAAIC,IAAD,IAA0B;AACtCU,IAAAA,WAAW,CAAC,CAAC,GAAGZ,QAAJ,EAAcE,IAAd,CAAD,CAAX;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAIC,EAAD,IAAsB;AACrCQ,IAAAA,WAAW,CACPZ,QAAQ,CAACa,MAAT,CAAiBC,IAAD,IAAS;AACrB,aAAOA,IAAI,CAACV,EAAL,KAAYA,EAAnB;AACH,KAFD,CADO,CAAX;AAKH,GAND;;AAOA,QAAMC,WAAW,GAAG,CAACD,EAAD,EAAYE,OAAZ,KAAiC;AACjD,UAAMS,gBAAgB,GAAGf,QAAQ,CAACgB,GAAT,CAAcC,QAAD,IAAc;AAClD,UAAIA,QAAQ,CAACb,EAAT,KAAgBA,EAApB,EAAwB;AACtBa,QAAAA,QAAQ,CAACX,OAAT,GAAmB,CAACW,QAAQ,CAACX,OAA7B;AACD;;AACD,aAAOW,QAAP;AACD,KALwB,CAAzB;AAMAL,IAAAA,WAAW,CAACG,gBAAD,CAAX;AACD,GARH,CAhB2D,CA0B3D;AAEA;AACA;AACA;AACA;;;AAEE,QAAMR,YAAY,GAAG,MAAM;AACzB,UAAMW,gBAAgB,GAAGlB,QAAQ,CAACa,MAAT,CAAiBI,QAAD,IAAcA,QAAQ,CAACX,OAAT,KAAqB,KAAnD,CAAzB;AACAM,IAAAA,WAAW,CAACM,gBAAD,CAAX;AACD,GAHD;;AAKF,QAAMC,MAAwB,GAAG;AAC7BnB,IAAAA,QAAQ,EAAEA,QADmB;AAE7BC,IAAAA,OAAO,EAAEA,OAFoB;AAG7BE,IAAAA,UAAU,EAAEA,UAHiB;AAI7BE,IAAAA,WAAW,EAAEA,WAJgB;AAK7BE,IAAAA,YAAY,EAAEA;AALe,GAAjC;AAQA;AAAA;AACI;AACA,YAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEY,MAA7B;AAAA,gBACKR;AADL;AAAA;AAAA;AAAA;AAAA;AAFJ;AAMH,CApDM,C,CAsDP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;GA5GaF,mB;;KAAAA,mB","sourcesContent":["import { ChangeEvent, createContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { TodoItem } from \"../types\";\n\n\ninterface TodoContextProp {\n    children: any;\n    value: TodoContextValue;\n}\n\nexport interface TodoContextValue {\n    todoList: TodoItem[];\n    addTodo: (todo: TodoItem) => void;\n    removeTodo: (id: string) => void;\n    handleCheck: (id: string, checked: boolean) => void;\n    handleDelete: () => void;\n}\nexport const initialValue: TodoContextValue = {\n    todoList: [],\n    addTodo: (todo:TodoItem)=>{},\n    removeTodo: (id: string) => {},\n    handleCheck: (id: string, checked: boolean) => {},\n    handleDelete: () => {},\n\n}\n\nexport const TodoContext = createContext(initialValue);\n\nexport const TodoContextProvider = (props: TodoContextProp) => {\n    const {children} = props;    \n    const [todoList, setTodoList] = useState<TodoItem[]>([]);\n\n\n    const addTodo = (todo: TodoItem): void => {\n        setTodoList([...todoList, todo]);\n    };\n\n    const removeTodo = (id: string): void => {\n        setTodoList (\n            todoList.filter((item)=> {\n                return item.id !== id;\n            })\n        );\n    };\n    const handleCheck = (id:string, checked: boolean) => {\n        const modifiedTodoList = todoList.map((todoItem) => {\n          if (todoItem.id === id) {\n            todoItem.checked = !todoItem.checked;\n          }\n          return todoItem;\n        });\n        setTodoList(modifiedTodoList);\n      };\n\n    // const [checkArr, setCheckArr] = useState([]);\n\n    // const handleCheck = (e: ChangeEvent, id: string) => {\n    //     const checked = e.target.checked;\n    //     setCheckArr([ {id:id, checked:checked}, ...checkArr])\n    // }\n    \n      const handleDelete = () => {\n        const filteredTodoList = todoList.filter((todoItem) => todoItem.checked === false);\n        setTodoList(filteredTodoList);\n      };\n\n    const values: TodoContextValue = {\n        todoList: todoList,\n        addTodo: addTodo,\n        removeTodo: removeTodo,\n        handleCheck: handleCheck,\n        handleDelete: handleDelete,\n    };\n    \n    return (\n        // <TodoContext.Provider value={values}>\n        <TodoContext.Provider value={values}>\n            {children}\n        </TodoContext.Provider>\n    );\n}\n\n// interface TodoContextProp {\n//     children: any;\n//     value: TodoContextValue;\n// }\n\n// export interface TodoContextValue {\n//     todoList: TodoItem[];\n//     addTodo: (todo: TodoItem) => void;\n//     removeTodo: (id: string) => void;\n// }\n// export const initialValue: TodoContextValue = {\n//     todoList: [],\n//     addTodo: (todo:TodoItem)=>{},\n//     removeTodo: (id: string) => {},\n// }\n\n// export const TodoContext = createContext(initialValue);\n\n// export const TodoContextProvider = (props: TodoContextProp) => {\n//     const {children} = props;    \n//     // const [inputDesc, setInputDesc] = useState<string>('')\n//     // const [inputCate, setInputCate] = useState<string>('')\n//     // const [inputCont, setInputCont] = useState<string>('')\n//     const [todoList, setTodoList] = useState<TodoItem[]>([]);\n\n\n//     const addTodo = (todo: TodoItem): void => {\n//         setTodoList([...todoList, todo]);\n//     };\n\n//     const removeTodo = (id: string): void => {\n//         setTodoList (\n//             todoList.filter((item)=> {\n//                 return item.id != id;\n//             })\n//         );\n//     };\n\n//     const values: TodoContextValue = {\n//         todoList: todoList,\n//         // id:Math.floor(Math.random() * 1000),  //给todolist的事随机分配一个0-1000的数做id\n//         // desc: inputDesc,\n//         // category: inputCate,\n//         // content: inputCont,\n//         addTodo: addTodo,\n//         removeTodo: removeTodo\n//     };\n    \n//     return (\n//         // <TodoContext.Provider value={values}>\n//         <TodoContext.Provider value={values}>\n//             {children}\n//         </TodoContext.Provider>\n//     );\n// }\n"]},"metadata":{},"sourceType":"module"}