[{"/Users/paraiii/Desktop/Todo-about-app-main 2/src/index.js":"1","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/TodoPage.tsx":"2","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Navbar.tsx":"3","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Form.tsx":"4","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/TodoList.tsx":"5","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Context/TodoContext.tsx":"6","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/InputTodo.tsx":"7","/Users/paraiii/Desktop/Todo-about-app-main 2/src/App.tsx":"8","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Content/About.tsx":"9","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/TodoContent.tsx":"10","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/API/AddTask.ts":"11","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/API/GetAllTasks.ts":"12"},{"size":243,"mtime":1629643631000,"results":"13","hashOfConfig":"14"},{"size":470,"mtime":1635393603981,"results":"15","hashOfConfig":"14"},{"size":441,"mtime":1634644697360,"results":"16","hashOfConfig":"14"},{"size":3621,"mtime":1635745276726,"results":"17","hashOfConfig":"14"},{"size":1134,"mtime":1635394647448,"results":"18","hashOfConfig":"14"},{"size":2704,"mtime":1635745447758,"results":"19","hashOfConfig":"14"},{"size":1133,"mtime":1635409148492,"results":"20","hashOfConfig":"14"},{"size":745,"mtime":1635407782380,"results":"21","hashOfConfig":"14"},{"size":324,"mtime":1635404329820,"results":"22","hashOfConfig":"14"},{"size":841,"mtime":1635679817527,"results":"23","hashOfConfig":"14"},{"size":503,"mtime":1635745656906,"results":"24","hashOfConfig":"14"},{"size":388,"mtime":1635702625224,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"17tk6sg",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/paraiii/Desktop/Todo-about-app-main 2/src/index.js",[],["53","54"],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/TodoPage.tsx",[],["55","56"],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Navbar.tsx",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Form.tsx",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/TodoList.tsx",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Context/TodoContext.tsx",["57"],"import { createContext, useCallback, useEffect, useState } from \"react\";\nimport { AddTask } from \"../API/AddTask\";\nimport { GetAllTasks } from \"../API/GetAllTasks\";\nimport { TodoItem } from \"../types\";\n\ninterface TodoContextProp {\n    children: any;\n    value: TodoContextValue;\n}\n\nexport interface TodoContextValue {\n    todoList: TodoItem[];\n    addTodo: (todo: TodoItem) => void;\n    removeTodo: (id: string) => void;\n    handleCheck: (id: string, checked: boolean) => void;\n    handleDelete: () => void;\n}\nexport const initialValue: TodoContextValue = {\n    todoList: [],\n    addTodo: (todo:TodoItem)=>{},\n    removeTodo: (id: string) => {},\n    handleCheck: (id: string, checked: boolean) => {},\n    handleDelete: () => {},\n}\n\nexport const TodoContext = createContext(initialValue);\n// const KEY = \"paraiii-todo-list\";\nexport const TodoContextProvider = (props: TodoContextProp) => {\n    const {children} = props;    \n    // const storage = window.localStorage;\n    // const storedList = storage.getItem(KEY) || \"[]\"\n    // const [todoList, setTodoList] = useState<TodoItem[]>(JSON.parse(storedList));\n    const [todoList, setTodoList] = useState<TodoItem[]>([]);\n\n    useEffect (() => {\n    //     storage.setItem(KEY, JSON.stringify(todoList));\n    // }, [todoList])\n        //每当todolist改变时，把东西存到storage里\n        AddTask().then(res => {\n             setTodoList(res.data)\n             debugger\n        })\n\n    //     GetAllTasks().then(res => {\n    //         setTodoList(res.data)\n    //    })\n    }, [todoList]);\n\n    const addTodo = (todo: TodoItem): void => {\n        setTodoList([...todoList, todo]);\n\n    };\n\n    const removeTodo = (id: string): void => {\n        setTodoList (\n            todoList.filter((item)=> {\n                return item.id !== id;\n            })\n        );\n    };\n    \n    const handleCheck = useCallback ((id:string, checked: boolean) => {\n        const modifiedTodoList = todoList.map((todoItem) => {\n          if (todoItem.id === id) {\n            todoItem.checked = !todoItem.checked;\n          }\n          return todoItem;\n        });\n        setTodoList(modifiedTodoList);\n    }, [todoList]);\n\n    const handleDelete = useCallback (() => {\n        const filteredTodoList = todoList.filter((todoItem) => todoItem.checked === false);\n        debugger\n        setTodoList(filteredTodoList);\n    }, [todoList]);\n\n    const values: TodoContextValue = {\n        todoList: todoList,\n        addTodo: addTodo,\n        removeTodo: removeTodo,\n        handleCheck: handleCheck,\n        handleDelete: handleDelete,\n    };\n\n    return (\n        <TodoContext.Provider value={values}>\n            {children}\n        </TodoContext.Provider>\n    );\n}\n\n","/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/InputTodo.tsx",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/App.tsx",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/Content/About.tsx",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/TodoContent.tsx",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/API/AddTask.ts",[],"/Users/paraiii/Desktop/Todo-about-app-main 2/src/Components/API/GetAllTasks.ts",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":21},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'GetAllTasks' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]